a <- rnorm(n=10, mean=0.1, sd=0.2)
b <- rnorm(n=10, mean = 0.8, sd=0.2)
t.test(a, b)$p.value
wilcox.test(a, b)
a <- c(seq(1, by = 2, length.out = 5), NA)
b <- c(NA, seq(10, by = 2, length.out = 5))
t.test(a, b)$p.value
wilcox.test(a, b)
a
b
a <- c(seq(1, by = 2, length.out = 5), NA)
b <- a
wilcox.test(a, b)
wilcox.test(a, b)$p.value
45117396 - 44870959
246437/30
example("symbol")
example(symbols)
help("rect")
help(seq)
155270560/300
155270560/50000
a <- c(seq(1, by = 2, length.out = 5), NA)
a
b <- c(NA, seq(10, by = 2, length.out = 5))
b
a[b==10]
b==10
na.omit(a[b==10])
as.numeric(na.omit(a[b==10]))
p <- rep(1,10)
p1 <- rep(1,10)
p1 <- rep(1,10)
-sum(p1/sum(p1) * log2(p1/sum(p1)))
p1/sum(p1)
log2(p1/sum(p1))
p1 <- 1:10
-sum(p1/sum(p1) * log2(p1/sum(p1)))
p1 <- rep(1,10)
-sum(p1/sum(p1) * log2(p1/sum(p1)))
p1 <- 1:10
-sum(p1/sum(p1) * log2(p1/sum(p1)))
??pch
help(points)
help("points")
plot(x=1,y=1, xlim = c(0,4))
plot(x=1,y=1, xlim = c(0,4), type = "n")
points(x=1:3, y=rep(1,3), pch=15, col="grey")
text(x=1:3, y=rep(1,3), rep("A",3), col=c("darkgreen", "darkolivegreen", "darkolivegreen4"))
plot(x=1,y=1, xlim = c(0,4), type = "n")
points(x=1:3, y=rep(1,3), pch=15, col="grey", cex=2)
text(x=1:3, y=rep(1,3), rep("A",3), col=c("darkgreen", "darkolivegreen", "darkolivegreen4"))
plot(x=1,y=1, xlim = c(0,4), type = "n")
points(x=1:3, y=rep(1,3), pch=15, col="grey", cex=4)
text(x=1:3, y=rep(1,3), rep("A",3), col=c("darkgreen", "darkolivegreen", "darkolivegreen4"))
text(x=1:3, y=rep(1.2, 3), c("darkgreen", "darkolivegreen", "darkolivegreen4"))
plot(x=1,y=1, xlim = c(0,4), type = "n")
points(x=1:4, y=rep(1,4), pch=15, col="grey", cex=4)
text(x=1:4, y=rep(1,4), rep("A",4), col=c("darkgreen", "darkolivegreen","darkolivegreen3", "darkolivegreen4"))
text(x=1:4, y=rep(1.2, 4), c("darkgreen", "darkolivegreen", "darkolivegreen3","darkolivegreen4"))
a
1 %in% c(1,2)
c(1,2) %in% 1
example(hist)
vec <- lapply(0:50, function(i) c("ba", rep("na", i)))
str <- lapply(vec, paste0, collapse="")
library(pryr)
object_size(vec)
object_size(str)
head(vec)
head(str)
a <- c("a", "b", "c")
object_size(a)
object_size(as.factor(a))
object_size(1:5)
object_size(list(1:5))
mem_used()
mem_change()
help(read.table)
y <- c(10,3)
x <- c(9,2)
fisher.test(x=x, y=y, conf.int = F)
x <- c(2,4)
y <- c(8,0)
fisher.test(x=x, y=y, conf.int = F)
fisher.test(x=x, y=y)
help(write.table)
help("outer")
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
id
info[id, ]
rownames(info) <- info$grade
info
as.character(grades)
info[as.character(grades), ]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
df
rep(1:nrow(df), df$n)
df$n
setdiff(names(df), "z")
df
setdiff(names(df), "n")
help("setdiff")
help("which")
help("%%")
-3 %% 1
-3 %% 2
help(xor)
help(<<-)
help("<<-")
a <- 10
for (b in 1:10) {
c <<- a + b
print(c)
}
a <- 10
for (b in 1:10) {
a <<- b
print(a)
}
for (b in 1:10) {
a <<- b
print(a)
}
print(a)
for (b in 1:10) {
a <- b
print(a)
}
print(a)
function(){
for (b in 1:10) {
a <- b
print(a)
}
}
print(a)
fc <- function(){
for (b in 1:10) {
a <- b
print(a)
}
}
fc
fc()
print(a)
fc <- function(){
for (b in 1:10) {
a <<- b
print(a)
}
}
fc
fc()
print(a)
help("with")
help("assign")
help("get")
help("rle-class")
help("rle")
help("on.exit")
help(invisible)
weekdays()
help(aperm)
help(duplicated)
help(ftable)
help(apropos)
help(message)
fc <- function(){
for (b in 1:10) {
a <<- b
message(a)
}
}
fc()
fc <- function(){
for (b in 1:10) {
a <<- b
warning(a)
}
}
fc()
help("download.file")
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f1(1)
`+`(1, `*`(2, 3))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
help(stop)
geterrmessage()
formals(f2)
formals(mean)
formals(sd)
formals(var)
body(var)
help("missing")
help(pmatch)
help(C_cov)
??C_cov
var
help(".Call")
body(sum)
sum
help("summary.aov")
help(sum)
class(sum())
class(sum
)
objs <- mget(ls("package:base"), inherits = TRUE)
objs
help(met)
help(mget)
help(Filter)
funs <- Filter(is.function, objs)
funs
ls("package:base")
help(mget)
funs
class(funs)
funs$abbreviate
body(funs$abbreviate)
formals(funs$abbreviate)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
help("Hypergeometric")
# Total bins (10)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 7
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
# Total bins (10)
N <- 10
# Total diff bins (7)
M <- 7
# promoter bins (3)
n <- 3
# promoter bins with diff (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 7
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
printf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 7
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
sprintf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
# Total bins (10)
N <- 10
# Total diff bins (7)
M <- 7
# promoter bins (3)
n <- 3
# promoter bins with diff (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
sprintf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 5
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
sprintf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
# Total bins (10)
N <- 10
# Total diff bins (7)
M <- 5
# promoter bins (3)
n <- 3
# promoter bins with diff (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
sprintf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 5
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
N <- 10
# Total diff bins (7)
M <- 5
# promoter bins (3)
n <- 3
# promoter bins with diff (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
for(k in seq(0,2)){
choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
}
sum <- 0
for(k in seq(0,2)){
choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
}
sum <- 0
for(k in seq(0,2)){
sum <- sum + choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
}
sum
1 - sum
# 1. diff bins enriched in promoter?
# Total bins (10)
N <- 10
# Total bins in promoter (3)
M <- 3
# diff bins (7)
n <- 5
# diff bins in promoter (2)
k <- 2
phyper(k, M, N-M, n, lower.tail = F)
#choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
sum <- 0
for(k in seq(0,2)){
sum <- sum + choose(M, k) * choose((N-M), (n-k)) / choose(N, n)
}
sprintf("K=%d,M=%d,N=%d,n=%d", k, M, N, n)
sum
help("p.adjust")
a <- c(0,0,0,0.3,0.3)
b <- c(1,1,1,1,0.25)
t.test(a,b)
help(subset)
help("grep")
help(strsplit)
help(match)
head(mtcars)
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
# create some data to work with
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
theme(legend.position = c(0.85, 0.85))
print(p0)
help(dnorm)
head(x)
help("with")
help(hist)
help("density")
help("shapiro.test")
shapiro.test(rnorm(n=100))
shapiro.test(rbinom(n=100, size = 100))
shapiro.test(rbinom(n=100, size = 100, prob = 0.3))
help(substitute)
help("sample")
help("subset")
help(hist)
help(mtext)
help("&&")
help("as.data.frame")
help(t)
shinyjs:::colourPickerAddin()
install.packages("optparse")
help(file)
help("cor")
help(t.test)
paste(1:3,2:4)
unlist(lapply(1:3, function(x){}))
a <- c("x", "y", "x")
b <- 1:3
unlist(lapply(a, function(x){
paste(x, b)
}))
unlist(lapply(a, function(x){
paste(x, b, sep="")
}))
a <- c("x", "y", "z")
b <- 1:3
unlist(lapply(a, function(x){
paste(x, b, sep="")
}))
a <- c("x", "y", "z")
b <- 1:3
mergeThem <- function(a, b){
unlist(lapply(a, function(x){
paste(x, b, sep="")
}))
}
mergeThem(a, b)
help(segments)
help(barplot)
grey(3)
help("grey")
help("grey.colors")
grey.colors(3)
help(pdf)
par("mar")
par("oma")
help("grey.colors")
help("par")
install.packages("knitr")
install.packages("knitr")
getOption("repos")
install.packages("kinitr")
install.packages("knitr")
library("knitr")
library("markdown")
devtools::install_github("rstudio/rticles")
help("deriv")
dn2t <- D(n2, t) - 172.5*n0 - (n2-n1)*4.16*10^-15*A - 4348*n2
dn2t <- D(n2~, t) - 172.5*n0 - (n2-n1)*4.16*10^-15*A - 4348*n2
help(rmarkdown)
??rmarkdown
demo()
demo(shiny)
demo(smooth)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
73*24
73/2*24
300/24
a <- c(1,2,3)
b <- c(2,3,4)
a %in% b
a[a %in% b]
a[! (a %in% b)]
setwd("~/Dropbox/CGmapTools/CGmapTools_documentation")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd", output_dir = "cgmaptools_documentation")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd", "bookdown::html_book")
bookdown::render_book("./01-CGmapTools_document.Rmd", "bookdown::html_book")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book("./01-CGmapTools_document.Rmd", output_format = "bookdown::epub_book")
bookdown::render_book("./01-CGmapTools_document.Rmd")
bookdown::render_book("./01-CGmapTools_document.Rmd", output_format = "bookdown::pdf_book")
bookdown::render_book("./01-CGmapTools_document.Rmd", output_format = "bookdown::epub_book")
